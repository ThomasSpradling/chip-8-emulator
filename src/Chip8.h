#include <vector>
#include <array>
#include <string>
using namespace std;

class Chip8 {
private:
  uint16_t current_instruction; // two byte opcode
  array<uint8_t, 80> FONTS = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
  };

public:
  uint16_t I;

  uint8_t sp; // stack pointer
  array<uint16_t, 16> stack; // array of at most 16 addresses

  bool drawFlag = false;

  array<uint8_t, 16> registers; // 16 registers

  uint8_t dt; // delay timer
  uint8_t st; // sound timer

  uint16_t pc; // program counter

  array<array<bool, 64>, 32> virtualDisplay; // 32x64 virtual display
  array<bool, 16> virtualKeys; // 16 keys

  array<uint8_t, 4096> memory;  // 4 KB memory

  Chip8();
  void init();
  void loadROM(const string &filename);
  void fetch_instruction();
  void execute_instruction();
  void incrementPC(uint16_t amount);
  void decrementPC(uint16_t amount);
};